{"version":3,"sources":["api/auth.service.js","utils/history.js","commons/components/GreetDev.js","pages/Helloworld/Helloworld.js","pages/Login/Login.js","actions/auth.js","actions/types.js","pages/RegisterClient/RegisterClient.js","http-commons.js","pages/RegisterRestaurant/RegisterRestaurant.js","commons/components/Nav.js","App.js","actions/message.js","reducers/auth.js","reducers/message.js","reducers/index.js","utils/serviceWorker.js","store.js","index.js"],"names":["API_URL","username","email","password","axios","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","history","createBrowserHistory","GreetDev","props","useState","likes","setlikes","reportmsg","setReportmsg","name","onClick","Helloworld","map","dev","key","validEmail","value","isEmail","className","role","required","Login","form","useRef","checkBtn","setEmail","setPassword","loading","setLoading","isLoggedIn","useSelector","state","auth","message","dispatch","useDispatch","to","onSubmit","e","preventDefault","current","validateAll","context","_errors","length","AuthService","type","payload","user","Promise","resolve","error","toString","reject","login","push","window","location","reload","catch","ref","autoFocus","onChange","target","validations","disabled","style","display","vpassword","Register","setUsername","successful","setSuccessful","register","create","baseURL","headers","RegisterRestaurant","address","tlf","registerData","setRegisterData","submitted","handleInputChange","event","console","log","Nav","navStyle","color","Form","Group","Control","id","placeholder","stryle","App","useEffect","listen","exact","path","component","RegisterClient","parse","getItem","initialState","combineReducers","action","Boolean","hostname","match","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","require","config","Store","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1863d8e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:8080/api/\";\r\n\r\nconst register = (username, email, password) => {\r\n  return axios.post(API_URL + \"signup\", {\r\n    username,\r\n    email,\r\n    password,\r\n  });\r\n};\r\n\r\nconst login = (email, password) => {\r\n  return axios\r\n    .post(API_URL + \"login\", {\r\n      email,\r\n      password,\r\n    })\r\n    .then((response) => {\r\n      if (response.data.accessToken) {\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n      }\r\n      return response.data;\r\n    });\r\n};\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem(\"user\");\r\n};\r\n\r\nexport default {\r\n  register,\r\n  login,\r\n  logout,\r\n};\r\n","import { createBrowserHistory } from \"history\";\r\n\r\nexport const history = createBrowserHistory();\r\n","import React, { useState }  from 'react';\r\n\r\n\r\nfunction GreetDev(props) { \r\n    const [likes, setlikes] = useState(0);\r\n    const [reportmsg, setReportmsg] = useState('');\r\n    return (\r\n        <div>\r\n            <p>I'm introducing you to <strong>{props.name}</strong> <i> {reportmsg} </i></p>\r\n            <p>Likes :  {likes} </p>\r\n            <button onClick={() => setlikes(likes+1)}>\r\n                Like\r\n            </button>\r\n            <button onClick={() => setReportmsg('Reported. Thank you chief')}>\r\n                Report    \r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GreetDev;","import React from 'react';\r\nimport GreetDev from '../../commons/components/GreetDev';\r\n\r\n\r\n\r\nfunction Helloworld() {\r\n  var devs = ['Albert C.', 'Hector A.', 'Oriol A.', 'Ruben B.', 'Samu R.', 'Daniel R.'];\r\n  return (\r\n    <div>\r\n      <strong>This is our Dev Team.</strong>\r\n      { devs.map(dev => <GreetDev name={dev} key={dev}/>) }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Helloworld;","import React,  { useState, useRef } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect, Link } from 'react-router-dom';\r\n\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\n\r\nimport { isEmail } from \"validator\";\r\n\r\nimport { login } from \"../../actions/auth\";\r\n\r\nimport '../../commons/components/App.css';\r\n\r\n\r\nconst validEmail = (value) => {\r\n  if (!isEmail(value)) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This is not a valid email.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst Login = (props) => {\r\n  const form = useRef();\r\n  const checkBtn = useRef();\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { isLoggedIn } = useSelector(state => state.auth);\r\n  const { message } = useSelector(state => state.message);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onChangeEmail = (e) => {\r\n    const email = e.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onChangePassword = (e) => {\r\n    const password = e.target.value;\r\n    setPassword(password);\r\n  };\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n\r\n    setLoading(true);\r\n\r\n    form.current.validateAll();\r\n\r\n    if (checkBtn.current.context._errors.length === 0) {\r\n      dispatch(login(email, password))\r\n        .then(() => {\r\n          props.history.push(\"/profile\");\r\n          window.location.reload();\r\n        })\r\n        .catch(() => {\r\n          setLoading(false);\r\n        });\r\n    } else {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to=\"/profile\" />;\r\n  }\r\n  \r\nreturn (\r\n    <section className=\"login\">\r\n      <div className=\"loginContainer\">\r\n        <Form onSubmit={handleLogin} ref={form}>\r\n          <label>E-mail</label>\r\n          <Input\r\n            type=\"text\"\r\n            autoFocus\r\n            required\r\n            name='email'\r\n            value={email}\r\n            onChange={onChangeEmail}\r\n            validations={[required,validEmail]}\r\n          />\r\n          <p className=\"errorMsg\"></p>\r\n\r\n          <label>Password</label>\r\n          <Input\r\n            type=\"text\"\r\n            autoFocus\r\n            required\r\n            name='password'\r\n            value={password}\r\n            onChange={onChangePassword}\r\n            validations={[required]}\r\n          />\r\n          <p className=\"errorMsg\"></p>\r\n          {message && (\r\n            <div className=\"form-group\">\r\n              <div className=\"alert alert-danger\" role=\"alert\">\r\n                {message}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"btnContainer\">\r\n            <button className=\"btn btn-primary btn-block\" disabled={loading}> \r\n              {loading ? (\r\n                <span> Loading...</span>\r\n                \r\n              ) : (<span>Sign up</span>)\r\n            }\r\n            </button>\r\n            <p>Do you have an account ?   \r\n            <Link to=\"/registerclient\"> Sign in</Link></p>\r\n          </div>       \r\n          <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n        </Form>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Login;","import {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n    SET_MESSAGE,\r\n  } from \"./types\";\r\n  \r\n  import AuthService from \"../api/auth.service\";\r\n  \r\n  export const register = (username, email, password) => (dispatch) => {\r\n    return AuthService.register(username, email, password).then(\r\n      (response) => {\r\n        dispatch({\r\n          type: REGISTER_SUCCESS,\r\n        });\r\n  \r\n        dispatch({\r\n          type: SET_MESSAGE,\r\n          payload: response.data.message,\r\n        });\r\n  \r\n        return Promise.resolve();\r\n      },\r\n      (error) => {\r\n        const message =\r\n          (error.response &&\r\n            error.response.data &&\r\n            error.response.data.message) ||\r\n          error.message ||\r\n          error.toString();\r\n  \r\n        dispatch({\r\n          type: REGISTER_FAIL,\r\n        });\r\n  \r\n        dispatch({\r\n          type: SET_MESSAGE,\r\n          payload: message,\r\n        });\r\n  \r\n        return Promise.reject();\r\n      }\r\n    );\r\n  };\r\n\r\n  export const login = (email, password) => (dispatch) => {\r\n    return AuthService.login(email, password).then(\r\n      (data) => {\r\n        dispatch({\r\n          type: LOGIN_SUCCESS,\r\n          payload: { user: data },\r\n        });\r\n  \r\n        return Promise.resolve();\r\n      },\r\n      (error) => {\r\n        const message =\r\n          (error.response &&\r\n            error.response.data &&\r\n            error.response.data.message) ||\r\n          error.message ||\r\n          error.toString();\r\n  \r\n        dispatch({\r\n          type: LOGIN_FAIL,\r\n        });\r\n  \r\n        dispatch({\r\n          type: SET_MESSAGE,\r\n          payload: message,\r\n        });\r\n  \r\n        return Promise.reject();\r\n      }\r\n    );\r\n  };\r\n  \r\n  export const logout = () => (dispatch) => {\r\n    AuthService.logout();\r\n  \r\n    dispatch({\r\n      type: LOGOUT,\r\n    });\r\n  };","export const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\r\nexport const LOGOUT = \"LOGOUT\";\r\n\r\nexport const SET_MESSAGE = \"SET_MESSAGE\";\r\nexport const CLEAR_MESSAGE = \"CLEAR_MESSAGE\";\r\n","import React,  { useState, useRef } from 'react';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\n\r\nimport { isEmail } from \"validator\";\r\n\r\nimport { register } from \"../../actions/auth\";\r\nimport '../../commons/components/App.css';\r\n\r\n\r\n\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst validEmail = (value) => {\r\n  if (!isEmail(value)) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This is not a valid email.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst vpassword = (value) => {\r\n  if (value.length < 6 || value.length > 40) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        The password must be between 6 and 40 characters.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst Register = () => {\r\n  const form = useRef();\r\n  const checkBtn = useRef();\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [successful, setSuccessful] = useState(false);\r\n\r\n  const { message } = useSelector(state => state.message);\r\n  const dispatch = useDispatch();\r\n\r\n  const onChangeUsername = (e) => {\r\n    const username = e.target.value;\r\n    setUsername(username);\r\n  };\r\n\r\n  const onChangeEmail = (e) => {\r\n    const email = e.target.value;\r\n    setEmail(email);\r\n  };\r\n\r\n  const onChangePassword = (e) => {\r\n    const password = e.target.value;\r\n    setPassword(password);\r\n  };\r\n\r\n  const handleRegister = (e) => {\r\n    e.preventDefault();\r\n\r\n    setSuccessful(false);\r\n\r\n    form.current.validateAll();\r\n\r\n    if (checkBtn.current.context._errors.length === 0) {\r\n      dispatch(register(username, email, password))\r\n        .then(() => {\r\n          setSuccessful(true);\r\n        })\r\n        .catch(() => {\r\n          setSuccessful(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"login\">\r\n      <div className=\"loginContainer\">\r\n        <Form onSubmit={handleRegister} ref={form}>\r\n          <label>Name</label>\r\n          <Input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          name='username'\r\n          value={username}\r\n          onChange={onChangeUsername}\r\n          validations={[required]}\r\n          />\r\n          <p className=\"errorMsg\"></p>\r\n\r\n          <label>E-mail</label>\r\n          <Input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          name='email'\r\n          value={email}\r\n          onChange={onChangeEmail}\r\n          validations={[required, validEmail]}\r\n          />\r\n          <p className=\"errorMsg\"></p>\r\n\r\n          <label>Password</label>\r\n          <input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          name='password'\r\n          value={password}\r\n          onChange={onChangePassword}\r\n          validations={[required, vpassword]}\r\n          ></input>\r\n          <p className=\"errorMsg\"></p>\r\n\r\n          <label>DNI</label>\r\n          <input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          name='dni'\r\n          ></input>\r\n          <p className=\"errorMsg\"></p>\r\n\r\n          <label>Address</label>\r\n          <input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          name='address'\r\n          ></input>\r\n          <p className=\"errorMsg\"></p>\r\n\r\n          <label>Tlf number</label>\r\n          <input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          name='tlf'\r\n          ></input>\r\n          <p className=\"errorMsg\"></p>\r\n\r\n          <div className=\"btnContainer\">\r\n            <button className=\"btn btn-primary btn-block\"> Sign up </button>\r\n            <p>Do you have an account?\r\n              <Link to=\"./login\"> Sign in</Link>\r\n            </p>\r\n            <p>Do you want to register as a restaurant?\r\n              <Link to=\"/registerrestaurant\"> Sign up</Link>\r\n            </p>\r\n          </div>   \r\n          {message && (\r\n            <div className=\"form-group\">\r\n              <div className={ successful ? \"alert alert-success\" : \"alert alert-danger\" } role=\"alert\">\r\n                {message}\r\n              </div>\r\n            </div>\r\n          )}\r\n          <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n        </Form>    \r\n      </div>\r\n    </section>\r\n\r\n    \r\n\r\n  );\r\n}\r\n\r\nexport default Register;","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:8080/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});\r\n\r\n\r\n//https://bezkoder.com/react-hooks-crud-axios-api/ following this tutorial\r\n","import React,  { useState, useEffect } from 'react';\r\nimport '../../commons/components/App.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport RegisterDataService from '../../api/RegisterService.js';\r\n\r\n\r\nfunction RegisterRestaurant() {\r\n  const initialRegisterState = {\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    address: '',\r\n    tlf: ''\r\n  };\r\n\r\n  const [registerData, setRegisterData] = useState(initialRegisterState);\r\n  // eslint-disable-next-line\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target;\r\n    setRegisterData({...registerData, [name]:value});\r\n    console.log(registerData);\r\n  };\r\n\r\n// eslint-disable-next-line\r\n  const sendRegister = () => {\r\n    var data = {\r\n      name: registerData.name,\r\n      email: registerData.email,\r\n      password: registerData.password,\r\n      dni: registerData.dni,\r\n      address: registerData.address,\r\n      tlf: registerData.tlf\r\n    };\r\n\r\n    RegisterDataService.create(data)\r\n      .then(response => {\r\n        setRegisterData({\r\n          name: response.data.name,\r\n          email: response.data.email,\r\n          password: response.data.password,\r\n          address: response.data.address,\r\n          tlf: response.data.tlf\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  };\r\n  return (\r\n    <section className=\"login\">\r\n      { submitted ? (\r\n        <div className=\"loginContainer\">\r\n          <p>Register successful! Welcome <strong>{registerData.name}</strong></p>\r\n          <Link to='/'> Go to main page</Link>\r\n        </div>\r\n      ):(\r\n        <div className=\"loginContainer\">\r\n          <label>Restaurant name</label>\r\n          <input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          name='name'\r\n          onChange={handleInputChange}\r\n          ></input>\r\n          <p className=\"errorMsg\"></p>\r\n\r\n          <label>E-mail</label>\r\n          <input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          name='email'\r\n          onChange={handleInputChange}\r\n          ></input>\r\n          <p className=\"errorMsg\"></p>\r\n\r\n          <label>Password</label>\r\n          <input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          name='password'\r\n          onChange={handleInputChange}\r\n          ></input>\r\n          <p className=\"errorMsg\"></p>\r\n\r\n          <label>Address</label>\r\n          <input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          name='address'\r\n          onChange={handleInputChange}\r\n          ></input>\r\n          <p className=\"errorMsg\"></p>\r\n\r\n          <label>Tlf number</label>\r\n          <input\r\n          type=\"text\"\r\n          autoFocus\r\n          required\r\n          name='tlf'\r\n          onChange={handleInputChange}\r\n          ></input>\r\n          <p className=\"errorMsg\"></p>\r\n\r\n          <div className=\"btnContainer\">\r\n            <button> Sign up</button>\r\n            <p>Do you have an account ?   \r\n            <Link to='/login'> Sign in</Link></p>\r\n            <p>Do you want to register as a client ?  \r\n            <Link to=\"/registerclient\"> Sign up</Link></p>\r\n          </div>       \r\n        </div>\r\n      )}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default RegisterRestaurant;","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport './Nav.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Nav() { \r\n    const navStyle = {\r\n        color: 'black'\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <li className=\"nav-links\">\r\n                <Link style = {navStyle} to='/'>\r\n                    <h3>Logo</h3>\r\n                </Link>\r\n                <Form>\r\n                    <Form.Group>\r\n                        <Form.Control id=\"formLocationNavBar\" placeholder=\"Enter delivery adress\" />\r\n                    </Form.Group>\r\n                </Form>\r\n                <Link stryle={navStyle} to='/login'>\r\n                    <h5>Log in</h5>\r\n                </Link>\r\n            </li>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { logout } from \"./actions/auth\";\r\nimport { clearMessage } from \"./actions/message\";\r\n\r\nimport { history } from './utils/history';\r\n\r\nimport Helloworld from './pages/Helloworld/Helloworld';\r\nimport Login from './pages/Login/Login.js';\r\nimport RegisterClient from './pages/RegisterClient/RegisterClient.js';\r\nimport RegisterRestaurant from './pages/RegisterRestaurant/RegisterRestaurant.js';\r\n\r\nimport Nav from './commons/components/Nav.js';\r\n\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\n\r\nconst App = () => {\r\n\r\n  const { user: currentUser } = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    history.listen((location) => {\r\n      dispatch(clearMessage()); // clear message when changing location\r\n    });\r\n  }, [dispatch]);\r\n\r\n  const logOut = () => {\r\n    dispatch(logout());\r\n  };\r\n\r\n  return (\r\n    <Router history={history}>\r\n      <div>\r\n        <Nav />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Helloworld}/>\r\n          <Route path='/login' component={Login}/>\r\n          <Route path='/registerclient' component={RegisterClient}/>\r\n          <Route path='/registerrestaurant' component={RegisterRestaurant}/>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;","import { SET_MESSAGE, CLEAR_MESSAGE } from \"./types\";\r\n\r\nexport const setMessage = (message) => ({\r\n  type: SET_MESSAGE,\r\n  payload: message,\r\n});\r\n\r\nexport const clearMessage = () => ({\r\n  type: CLEAR_MESSAGE,\r\n});\r\n","import {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n  } from \"../actions/types\";\r\n  \r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\n  \r\n  const initialState = user\r\n    ? { isLoggedIn: true, user }\r\n    : { isLoggedIn: false, user: null };\r\n  \r\n  export default function (state = initialState, action) {\r\n    const { type, payload } = action;\r\n  \r\n    switch (type) {\r\n      case REGISTER_SUCCESS:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: false,\r\n        };\r\n      case REGISTER_FAIL:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: false,\r\n        };\r\n      case LOGIN_SUCCESS:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: true,\r\n          user: payload.user,\r\n        };\r\n      case LOGIN_FAIL:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: false,\r\n          user: null,\r\n        };\r\n      case LOGOUT:\r\n        return {\r\n          ...state,\r\n          isLoggedIn: false,\r\n          user: null,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n  ","import { SET_MESSAGE, CLEAR_MESSAGE } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_MESSAGE:\r\n      return { message: payload };\r\n\r\n    case CLEAR_MESSAGE:\r\n      return { message: \"\" };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport auth from \"./auth\";\r\nimport message from \"./message\";\r\n\r\nexport default combineReducers({\r\n  auth,\r\n  message,\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider} from 'react-redux';\r\nimport App from './App';\r\nimport allReducer from './reducers/index';\r\nimport * as serviceWorker from './utils/serviceWorker';\r\nimport Store from './store'\r\n\r\nrequire('dotenv').config()\r\n\r\nconst store = Store;\r\n\r\nReactDOM.render(\r\n  <Provider store = {store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}